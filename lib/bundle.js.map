{"version":3,"sources":["webpack:///webpack/bootstrap dcb02279fb062622d8c0","webpack:///./lib/bullet.js","webpack:///./lib/missile_defense.js","webpack:///./lib/game.js","webpack:///./lib/missile.js","webpack:///./lib/gunner.js","webpack:///./lib/city.js","webpack:///./lib/collidable_object.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AC7DA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA,gDAAgD;AAChD,SAAS,0FAA0F;AACnG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;;;;ACvHA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;AClDD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,mFAAmF,iBAAiB;AACpG,6DAA6D,YAAY;AACzE,uEAAuE,mCAAmC;AAC1G;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC7RA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,4BAA4B;AACjC;AACA;AACA,mDAAmD;AACnD;AACA,gDAAgD;AAChD,SAAS,0FAA0F;AACnG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;;;;;;;ACvKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mDAAmD;AACnD;AACA,gDAAgD;AAChD,SAAS,0FAA0F;AACnG;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dcb02279fb062622d8c0","import CollidableObject from './collidable_object';\n\nclass Bullet extends CollidableObject {\n  constructor(ctx, xPos, yPos){\n    super(xEnd, yEnd)\n    // this.xPos = xPos;\n    // this.yPos= yPos;\n    this.xEnd = xEnd;\n    this.yEnd = yEnd;\n    this.angle = Math.atan2(yEnd - yPos, xEnd - xPos)\n    this.angle = this.angle + ((180 * Math.PI) / 180)\n    this.speed = 3;\n    // this.vx = Math.cos(this.angle) * this.speed;\n    // this.vy = Math.sin(this.angle) * this.speed;\n    this.draw = this.draw.bind(this);\n    // this.changePosition = this.changePosition.bind(this);\n    // this.move = this.move.bind(this);\n    // this.ctx = ctx;\n    // this.collided = false;\n    // this.exploded = false;\n    // this.timedOut = false;\n    // this.markedForClear = false;\n    this.image = new Image();\n    this.image.src = 'assets/images/bullet_sprite.png'\n    this.count = 0;\n    this.internalCLick = 0;\n    this.x = this.xPos - 5;\n    this.y = this.yPos - 3;\n    this.height = 10;\n    this.width = 10;\n    // this.generalExplosion = new Image()\n    // this.generalExplosion.src = 'assets/images/general_explosion_sprite.png'\n    // this.generalExplosionCountHoz = 0;\n    // this.generalExplosionCountVert = 0;\n    // this.generalExplosionClick = 0;\n    // this.explosion = new Audio([`assets/sound/explosion.wav`])\n    // this.explosion.load()\n    // this.explosion.volume = 0.1;\n  }\n\n  mute(){\n    this.explosion.muted = true;\n  }\n\n  playSound() {\n    this.explosion.muted = false;\n  }\n\n  hasCollided() {\n    this.collided = true;\n  }\n\n  explode() {\n    this.exploded = true;\n    if (!this.markedForClear){\n      this.x -= 15;\n      this.y -= 15;\n      this.explosionSound.play();\n      this.markedForClear = true;\n      setTimeout(() => {\n        this.timedOut = true\n        this.radius = 0;}, 800)\n    }\n  }\n\n  draw() {\n    this.internalCLick += 2;\n    if (!this.collided && !this.exploded){\n      this.ctx.drawImage(this.image, 170, 47, 50, 49, this.xPos-5, this.yPos-6, 20, 20);\n    } else if (this.exploded) {\n      this.height = 35;\n      this.width = 35;\n      this.generalExplosionClick += 5\n      if (this.generalExplosionClick % 25 === 0){\n        if (this.generalExplosionCountHoz === 390){ // this is the max width of sprite sheet\n          this.generalExplosionCountHoz = 0;\n          this.generalExplosionCountVert += 130; // sprite sheet is in sqs of 130 by 130\n        } else if (this.generalExplosionCountHoz === 130 && this.gunnerExplosionCountVert === 390){ // for when we reach the end of the sprite sheet\n          this.generalExplosionCountHoz = 0;\n          this.generalExplosionCountVert = 0;\n          this.generalHit = false;\n        } else {\n          this.generalExplosionCountHoz += 130;\n        }\n      }\n      this.ctx.drawImage(this.generalExplosion, this.generalExplosionCountHoz, this.generalExplosionCountVert, 100, 100, this.x-13, this.y-15, 50, 50)\n    }\n  }\n\n  changePosition() {\n    this.yPos -= this.vy;\n    this.xPos -= this.vx;\n    this.x -= this.vx;\n    this.y -= this.vy;\n  }\n\n\n  hasCollidedWith(otherObject){\n      let dx = this.xPos - otherObject.xPos;\n      let dy = this.yPos - otherObject.yPos;\n      let distance = Math.sqrt(dx * dx + dy * dy)\n\n      if (distance < this.radius + otherObject.radius){\n        return true\n      } else {\n        return false\n      }\n  }\n\n  move() {\n    if (!this.exploded) {\n      this.draw();\n      this.changePosition();\n    } else {\n      this.draw();\n    }\n  }\n}\n\nexport default Bullet;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bullet.js\n// module id = 0\n// module chunks = 0","import Game from './game';\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  $('.end-screen').hide()\n  const startAudio = new Audio(['assets/sound/Chopin - Nocturne op.9 No.2.mp3'])\n  startAudio.load();\n  startAudio.play();\n  startAudio.loop = true;\n  startAudio.muted = true;\n  const canvas = document.querySelector('canvas');\n  const ctx = canvas.getContext('2d');\n  const game = new Game(ctx, canvas);\n  game.muted = true;\n  let inPlay = true;\n  let button = document.getElementById('sound-button')\n  button.addEventListener('click', (e) => {\n    if (startAudio.muted){\n      \n      startAudio.muted = false;\n      game.muted = false;\n      $('i.fa-microphone').toggleClass('sound')\n    } else {\n      startAudio.muted = true;\n      game.muted = true;\n      $('i.fa-microphone').toggleClass('sound')\n    }\n  })\n\n  let button2 = document.getElementById('sound-button2')\n  button2.addEventListener('click', (e) => {\n    if (startAudio.muted){\n      startAudio.muted = false;\n      game.muted = false;\n      $('i.fa-microphone').toggleClass('sound')\n    } else {\n      startAudio.muted = true;\n      game.muted = true;\n      $('i.fa-microphone').toggleClass('sound')\n    }\n  })\n\n    document.addEventListener('keypress', (e) => {\n      if ( e.code === 'Space' && inPlay === true){\n        $('.start-screen').hide();\n        game.play(ctx, canvas);\n        inPlay = false;\n      }\n    })\n})\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/missile_defense.js\n// module id = 1\n// module chunks = 0","import Bullet from './bullet'\nimport Missile from './missile';\nimport Gunner from './gunner';\nimport City from './city';\n\n\nclass Game {\n  constructor(ctx, canvas){\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.renderFrame = this.renderFrame.bind(this)\n    this.createMissiles = this.createMissiles.bind(this)\n    this.createCities = this.createCities.bind(this)\n    this.gameOver.bind(this);\n    this.updateStats.bind(this);\n    this.checkCanvas = this.checkCanvas.bind(this)\n    this.createMissiles(5)\n    this.createCities();\n    this.gunner1 = new Gunner(263, 420, this.ctx)\n    this.bullets = [];\n    this.checkCollision = this.checkCollision.bind(this)\n    this.explodedObjects = [];\n    this.click = this.click.bind(this);\n    this.triggerGun = this.triggerGun.bind(this);\n    this.click();\n    this.destroyedCityCount = [];\n    this.gunnerLives = 3\n    this.missileCount = 5\n    this.requestId;\n    this.gameFinished = false;\n    this.points = 0;\n    this.gameFinishedMusic = new Audio(['assets/sound/Chopin - Nocturne op.9 No.2.mp3'])\n    this.mute = this.mute.bind(this)\n    this.unmute = this.unmute.bind(this)\n    this.muted;\n    this.createRightMissiles = this.createRightMissiles.bind(this)\n    this.createLeftMissiles = this.createLeftMissiles.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  reset(){\n   this.createMissiles(5)\n   this.createCities();\n   this.bullets = [];\n   this.explodedObjects = [];\n   this.destroyedCityCount = [];\n   this.gunnerLives = 3\n   this.missileCount = 5\n   this.gameFinished = false;\n   this.points = 0;\n  }\n\n  mute(){\n    let allObjects = this.missiles.concat(this.cities).concat(this.bullets).concat(this.gunner1)\n    allObjects.forEach(obj => obj.mute())\n    this.muted = true;\n  }\n\n  unmute(){\n    let allObjects = this.missiles.concat(this.cities).concat(this.bullets).concat(this.gunner1)\n    allObjects.forEach(obj => obj.playSound())\n    this.muted = false;\n  }\n\n  updateStats(){\n    document.getElementById('gunner-lives').innerHTML = `Gunner Lives Remaining: ${this.gunnerLives}`\n    document.getElementById('points').innerHTML = `Points: ${this.points}`\n    document.getElementById('cities').innerHTML = `Cities Remaining: ${6 - this.destroyedCityCount.length}`\n  }\n\n\n  click(){\n    let that = this\n    var pos = [];\n    that.canvas.onclick = function(e) {\n      let yEnd = e.offsetY\n      let xEnd = e.offsetX\n      that.triggerGun(xEnd, yEnd)\n\n      that.gunner1.shootSound.load()\n      that.gunner1.shootSound.play()\n    }\n  }\n\n  triggerGun(xEnd, yEnd){\n    let bullet = this.gunner1.shoot(xEnd, yEnd)\n    this.bullets.push(bullet);\n  }\n\n  createLeftMissiles(num){\n    let leftMissiles = [];\n    let speeds = [1.2, 1.3, 1.4, 1.5, 1.7, 2, 2.2, 2.5, 2.7]\n    let angles = [ 70, 80, 75, 73, 68, 85, 88, 90]\n    let xPositions = [50, 75, 100, 120, 150, 200, 210, 250, 300, 400, 300]\n    for (let i = 0; i < num; i++){\n      let angle = angles[Math.floor(Math.random() * angles.length)];\n      let xPos = xPositions[Math.floor(Math.random() * xPositions.length)];\n      let speed = speeds[Math.floor(Math.random() * speeds.length)];\n      let missile = new Missile(this.ctx, xPos, 0, angle, speed);\n      leftMissiles.push(missile)\n    }\n    return leftMissiles\n  }\n\n  createRightMissiles(num){\n    let rightMissiles = [];\n    let speeds = [1.2, 1.3, 1.4, 1.5, 1.7, 1.8, 2, 2.2, 2.5, 2.7]\n    let angles = [ 120, 115, 110, 105, 100, 95, 90]\n    let xPositions = [550, 525, 575, 425, 450, 400, 350, 300, 425, 325]\n    for (let i = 0; i < num; i++){\n      let angle = angles[Math.floor(Math.random() * angles.length)];\n      let xPos = xPositions[Math.floor(Math.random() * xPositions.length)];\n      let speed = speeds[Math.floor(Math.random() * speeds.length)];\n      let missile = new Missile(this.ctx, xPos, 0, angle, speed);\n      rightMissiles.push(missile)\n    }\n    return rightMissiles\n  }\n\n  createMissiles(num){\n    let leftNumber = num - 3\n    let rightNumber = 3\n\n    let rightMissiles = this.createRightMissiles(rightNumber)\n    let leftMissiles = this.createLeftMissiles(leftNumber)\n    return this.missiles = leftMissiles.concat(rightMissiles)\n  }\n\n  createCities(){\n    let city1 = new City(0, 450, 100, 50, this.ctx)\n    let city2 = new City(100, 450, 100, 50, this.ctx)\n    let city3 = new City(200, 450, 100, 50, this.ctx)\n    let city4 = new City(300, 450, 100, 50, this.ctx)\n    let city5 = new City(400, 450, 100, 50, this.ctx)\n    let city6 = new City(500, 450, 100, 50, this.ctx)\n    return this.cities = [city1,city2, city3, city4, city5, city6]\n  }\n\n  checkCollision(){\n    let missiles = this.missiles\n    let explodedBullets = this.explodedObjects.filter((object) => object.constructor.name === 'Bullet')\n    let bullets = this.bullets.concat(explodedBullets)\n    for (let i = 0; i < missiles.length; i++) {\n      for (let j = 0; j < bullets.length; j++) {\n        const missile = missiles[i];\n        const bullet = bullets[j];\n        //\n        if (missile.hasCollidedWith(bullet)){\n          missile.explode();\n          missile.generalHit = true;\n          bullet.explode();\n          this.explodedObjects.push(missile)\n          this.explodedObjects.push(bullet)\n          this.missileCount--;\n          this.points = this.points + 10\n          missiles.splice(missiles.indexOf(missile),1)\n          bullets.splice(bullets.indexOf(bullet),1)\n          return\n        }\n      }\n    }\n    if (this.missiles.length === 0) return;\n    let missiles2 = this.missiles\n    let gunners = [this.gunner1]\n    for (let i = 0; i < missiles.length; i++) {\n      for (let j = 0; j < gunners.length; j++) {\n        const missile = missiles2[i];\n        const gunner = gunners[j];\n        if (missile.hasCollidedWith(gunner)){\n          missile.explode();\n          missile.generalHit = true;\n          this.gunnerLives--;\n          this.missileCount--;\n          this.explodedObjects.push(missile)\n          this.explodedObjects.push(gunner)\n          missiles.splice(missiles2.indexOf(missile),1)\n        }\n      }\n    }\n    if (this.missiles.length === 0) return;\n    let missiles3 = this.missiles\n    let cities = this.cities\n    for (let i = 0; i < missiles3.length; i++) {\n      for (let j = 0; j < cities.length; j++) {\n        const missile = missiles3[i];\n        const city = cities[j];\n        if ( (missile.yPos > 450) && ( (missile.xPos >= city.xStart) &&\n           (missile.xPos <= city.xStart + 100) ) ){\n          missile.explode();\n          city.explode();\n          missile.cityHit = true;\n          this.missileCount--;\n          if (!this.destroyedCityCount.includes(city)) this.destroyedCityCount.push(city);\n          this.explodedObjects.push(missile);\n          this.missiles.splice(this.missiles.indexOf(missile),1)\n          return\n        }\n      }\n     }\n    }\n\n  checkCanvas(){\n    this.missiles.forEach( obj => {\n      if (obj.xPos < 0 || obj.xPos > 600 || obj.yPos > 500 || obj.yPos < 0  ){\n        this.missileCount --;\n        this.missiles.splice(this.missiles.indexOf(obj),1)\n      }\n    })\n  }\n\n  renderFrame() {\n    this.updateStats();\n    if (this.muted){\n\n      this.mute();\n    } else {\n\n      this.unmute();\n    }\n    if(this.gameFinished) return window.cancelAnimationFrame(this.requestId);\n    this.ctx.clearRect(0,0, 600, 500)\n    this.gunner1.draw()\n    this.checkCanvas();\n    this.bullets.forEach(bullet => {\n      if (bullet.yPos <= bullet.yEnd || bullet.exploded){\n        bullet.explode();\n        if (!this.explodedObjects.includes(bullet)) {\n          this.explodedObjects.push(bullet);\n          this.bullets.splice(this.bullets.indexOf(bullet),1)\n        }\n      }\n    })\n    this.cities.forEach(city => {\n      city.draw();\n    })\n\n    let allObjects = this.bullets.concat(this.missiles)\n    allObjects.forEach((object) => {\n            object.move();\n        });\n    if (this.explodedObjects.length !== 0){\n      for (let i=0; i < this.explodedObjects.length; i++){\n        if (this.explodedObjects[i].timedOut){\n          this.explodedObjects.splice(i,1)\n          continue;\n        }\n        this.explodedObjects[i].draw();\n      }\n    }\n    this.checkCollision();\n    this.gameOver();\n    this.newLevel();\n    this.requestId = requestAnimationFrame(this.renderFrame);\n  }\n\n  gameOver(){\n    if (this.gunnerLives === 0 || this.destroyedCityCount.length === 6){\n      $('.end-screen').show()\n      $('.points').html(this.points)\n      this.gameFinished = true;\n      this.cities.forEach(city => city.stopSound())\n\n      key('space', () => {\n        $('.end-screen').hide()\n        this.reset();\n        this.play(this.ctx, this.canvas);\n        key.unbind('space')\n      })\n    }\n  }\n\n  newLevel(){\n    if (this.missileCount === 0 && !this.gameFinished ){\n      let numOfMissilesArr = [4,5,6,7,8]\n      let numOfMissiles = numOfMissilesArr[Math.floor(Math.random() * 4)]\n      this.missileCount = numOfMissiles\n      return this.createMissiles(numOfMissiles)\n    }\n  }\n\n  play(){\n    this.renderFrame();\n  }\n}\n\nexport default Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 2\n// module chunks = 0","import CollidableObject from './collidable_object'\n\n class Missile extends CollidableObject {\n  constructor(ctx, xPos, yPos) {\n    super(angle, speed)\n  // this.xPos = xPos\n  // this.yPos = yPos;\n  this.originalAngle = angle;\n  this.angle = this.originalAngle * Math.PI / 180\n  this.speed = speed;\n  // this.vx = Math.cos(this.angle) * this.speed;\n  // this.vy = Math.sin(this.angle) * this.speed;\n  this.draw = this.draw.bind(this);\n  // this.changePosition = this.changePosition.bind(this);\n  // this.move = this.move.bind(this);\n  // this.ctx = ctx;\n  // this.collided = false;\n  // this.exploded = false;\n  // this.timedOut = false;\n  // this.markedForClear = false;\n  this.regularMissile = new Image();\n  this.regularMissile.src = 'assets/images/missile_sprite.png'\n  this.cityHit = false;\n  this.cityExplosion = new Image()\n  this.cityExplosion.src = 'assets/images/explosion-sprite.png'\n  this.cityExplosionCount = 0;\n  this.cityExplosionClick = 0;\n  this.generalHit = 0;\n  // this.generalExplosion = new Image()\n  // this.generalExplosion.src = 'assets/images/general_explosion_sprite.png'\n  // this.generalExplosionCountHoz = 0;\n  // this.generalExplosionCountVert = 0;\n  // this.generalExplosionClick = 0;\n  this.x = this.xPos - 8;\n  this.y = this.yPos - 50;\n  this.width = 15;\n  this.height = 50;\n  this.createAngles = this.createAngles.bind(this);\n  this.trueCollision = this.trueCollision.bind(this);\n  // this.explosion = new Audio([`assets/sound/explosion.wav`]);\n  // this.explosion.load();\n  // this.explosion.volume = 0.1;\n\n  }\n\n  mute(){\n    this.explosion.muted = true;\n  }\n\n  playSound() {\n    this.explosion.muted = false;\n  }\n\n  hasCollided() {\n    this.collided = true;\n  }\n\n  explode() {\n    this.exploded = true;\n    if (!this.markedForClear){\n      this.markedForClear = true;\n      this.fallingSound.pause();\n      this.explosion.play()\n      setTimeout(() => this.timedOut = true, 500)\n    }\n  }\n\n  draw() {\n    if (!this.falling) {\n      this.falling = true\n    }\n    if (this.cityHit){\n      this.cityExplosionClick += 2\n      if (this.cityExplosionClick % 20 === 0) {\n          this.cityExplosionCount += 95;\n      }\n      this.ctx.drawImage(this.cityExplosion, this.cityExplosionCount, 100, 90, 100, this.xPos-30, this.yPos-40, 60, 50);\n    } else if (this.generalHit) { // (!this.collided && !this.exploded){\n      this.generalExplosionClick += 5\n      if (this.generalExplosionClick % 10 === 0){\n        if (this.generalExplosionCountHoz === 390){ // this is the max width of sprite sheet\n          this.generalExplosionCountHoz = 0;\n          this.generalExplosionCountVert += 130; // sprite sheet is in sqs of 130 by 130\n        } else if (this.generalExplosionCountHoz === 130 && this.gunnerExplosionCountVert === 390){ // for when we reach the end of the sprite sheet\n          this.generalExplosionCountHoz = 0;\n          this.generalExplosionCountVert = 0;\n          this.generalHit = false;\n        } else {\n          this.generalExplosionCountHoz += 130;\n        }\n      }\n      this.ctx.drawImage(this.generalExplosion, this.generalExplosionCountHoz, this.generalExplosionCountVert, 100, 100, this.xPos-30, this.yPos-35, 50, 50)\n\n    } else if (!this.collided && !this.exploded){\n        this.ctx.drawImage(this.regularMissile, 0, 0, 90, 120, this.xPos-50, this.yPos-50, 60, 50 ) //adjusts image to have tip be at at xpos,ypos\n    } else if (this.exploded && !this.timedOut) {\n      this.ctx.beginPath();\n      this.ctx.fillStyle = this.color\n      this.ctx.fillRect(this.xPos,this.yPos, 4, 10)\n      this.ctx.closePath();\n    }\n  }\n\n  exploded(){\n    this.exploded = true;\n  }\n\n  changePosition() {\n    this.yPos += this.vy;\n    this.xPos += this.vx;\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n\n  createAngles(xPos, yPos, height, width){\n    let leftSideAngles = [[xPos, yPos + height],[xPos, yPos + height/3], [xPos, yPos + height/2]]\n    let topAngles = [[xPos, yPos], [xPos + width/4, yPos], [xPos + width/3, yPos], [xPos + width/2, yPos]]\n    let rightSideAngles = [[xPos + width, yPos], [xPos + width, yPos + height/4],[xPos + width, yPos + height /2]]\n    let bottomAngles = [[xPos + width, yPos + height], [xPos + width/2, yPos + height], [xPos + width/4, yPos + height]]\n    return leftSideAngles.concat(topAngles).concat(rightSideAngles).concat(bottomAngles)\n  }\n\n  xCheck(coord, otherObject){\n    if (coord[0] > otherObject.x && coord[0] < otherObject.x + otherObject.width){\n      return true\n    } else {\n      return false\n    }\n  }\n\n  yCheck(coord, otherObject){\n    if (coord[1] > otherObject.y && coord[1] < otherObject.y + otherObject.height){\n      return true\n    } else {\n      return false\n    }\n  }\n\n  trueCollision(coord, otherObject){\n    if (this.xCheck(coord, otherObject) && this.yCheck(coord, otherObject)) {\n      return true;\n    } else {\n      return false\n    }\n  }\n\n  hasCollidedWith(otherObject){\n    let angles = this.createAngles(this.x, this.y, 50, 15)\n    for (let i = 0; i < angles.length; i++){\n      if (this.trueCollision(angles[i], otherObject)){\n        return true\n      }\n    }\n    return false\n  }\n\n  move() {\n    if (!this.exploded) {\n      this.draw();\n      this.changePosition();\n    } else {\n      this.draw();\n    }\n  }\n\n}\n\nexport default Missile;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/missile.js\n// module id = 3\n// module chunks = 0","// import Bullet from './gunner'\nimport Bullet from './bullet';\nclass Gunner {\n  constructor(xPos, yPos, ctx){\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.x= xPos;\n    this.y =yPos;\n    this.ctx = ctx;\n    this.max = 20;\n    this.shoot = this.shoot.bind(this)\n    this.width = 70;\n    this.height = 30;\n    this.image = new Image();\n    this.image.src = 'assets/images/gunner.png'\n    this.shootSound = new Audio(['assets/sound/gunshot.com-1143231822.wav'])\n    this.shootSound.volume = 0.1;\n\n  }\n\n  mute(){\n    this.shootSound.muted = true;\n  }\n\n  playSound() {\n    this.shootSound.muted = false;\n  }\n\n  shoot(endPosX, endPosY ){\n      let bullet = new Bullet (this.ctx, this.x + 30, this.y + 15, endPosX, endPosY)\n      return bullet\n  }\n\n  draw(){\n    this.ctx.drawImage(this.image, this.xPos-10, this.yPos-8)\n  }\n\n  hasCollidedWith(otherObject){\n  }\n}\n\nexport default Gunner;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/gunner.js\n// module id = 4\n// module chunks = 0","\nclass City {\n  constructor(xStart, yStart, width, height, ctx){\n    this.xStart = xStart;\n    this.yStart = yStart;\n    this.width = width;\n    this.height = height;\n    this.ctx = ctx;\n    this.exploded = false;\n    this.image = new Image()\n    this.image.src = './assets/images/city_pic.jpg'\n    this.flame = new Image();\n    this.flame.src = './assets/images/flame_sprite.png'\n    this.generalExplosionCountHoz = 10;\n    this.generalExplosionCountVert = 55;\n    this.generalExplosionClick = 0;\n    this.burningSound = new Audio(['assets/sound/firesound.wav'])\n    this.burningSound.load();\n    this.burningSound.volume = 0.1;\n    this.startSound = this.startSound.bind(this);\n    this.markedForClear = false;\n    this.stopSound = this.stopSound.bind(this)\n  }\n\n  mute(){\n    this.burningSound.muted = true;\n  }\n\n  playSound() {\n    this.burningSound.muted = false;\n  }\n\n  stopSound(){\n    this.burningSound.volume = 0.0;\n  }\n\n  explode() {\n    this.exploded = true;\n    this.startSound()\n  }\n\n  startSound(){\n    this.burningSound.loop = true;\n    this.burningSound.play();\n  }\n\n\n  draw(){\n    if (!this.exploded){\n      this.ctx.drawImage(this.image, this.xStart, this.yStart, this.width, this.height)\n    } else {\n      this.generalExplosionClick += 5\n      if (this.generalExplosionClick % 65 === 0){\n        if (this.generalExplosionCountHoz === 465){ // this is the max width of sprite sheet\n          this.generalExplosionCountHoz = 10;\n          this.generalExplosionCountVert += 130; // sprite sheet is in sqs of 130 by 130\n        } else if (this.generalExplosionCountHoz === 660 && this.gunnerExplosionCountVert === 465){ // for when we reach the end of the sprite sheet\n          this.generalExplosionCountHoz = 10;\n          this.generalExplosionCountVert = 55;\n        } else {\n          this.generalExplosionCountHoz += 65;\n        }\n      }\n      this.ctx.drawImage(this.image, this.xStart, this.yStart, this.width, this.height)\n      this.ctx.drawImage(this.flame, this.generalExplosionCountHoz, 55, 60, 100, this.xStart, this.yStart, 50, 100)\n      this.ctx.drawImage(this.flame, this.generalExplosionCountHoz, 55, 60, 100, this.xStart+50, this.yStart, 50, 100)\n    }\n  }\n\n}\n\nexport default City;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/city.js\n// module id = 5\n// module chunks = 0","\n\nclass CollidableObject {\n  constructor(ctx, xPos, yPos){\n    this.ctx = ctx;\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.vx = Math.cos(this.angle) * this.speed;\n    this.vy = Math.sin(this.angle) * this.speed;\n    this.changePosition = this.changePosition.bind(this);\n    this.move = this.move.bind(this);\n    this.collided = false;\n    this.exploded = false;\n    this.timedOut = false;\n    this.markedForClear = false;\n    this.generalExplosion = new Image()\n    this.generalExplosion.src = 'assets/images/general_explosion_sprite.png'\n    this.generalExplosionCountHoz = 0;\n    this.generalExplosionCountVert = 0;\n    this.generalExplosionClick = 0;\n    this.explosion = new Audio([`assets/sound/explosion.wav`])\n    this.explosion.load()\n    this.explosion.volume = 0.1;\n  }\n\n}\n\n\nexport default CollidableObject\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/collidable_object.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}