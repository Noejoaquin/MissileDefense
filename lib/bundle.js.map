{"version":3,"sources":["webpack:///webpack/bootstrap b3405e3cd90f2174d4c9","webpack:///./lib/bullet.js","webpack:///./lib/missile_defense.js","webpack:///./lib/game.js","webpack:///./lib/missile.js","webpack:///./lib/gunner.js","webpack:///./lib/city.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;;;;ACtHA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;;;;;;;;;;ACbD;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mFAAmF,iBAAiB;AACpG,4DAA4D,YAAY;AACxE,uEAAuE,mCAAmC;AAC1G;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,SAAS;AACT;AACA,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;;ACtNA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,4BAA4B;AACjC;AACA;AACA,mDAAmD;AACnD;AACA,gDAAgD;AAChD,SAAS,0FAA0F;AACnG;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA,KAAK,4CAA4C;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;;;;;;;;AC5IA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","file":"./lib/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b3405e3cd90f2174d4c9","\n\nclass Bullet {\n  constructor(ctx, xPos, yPos, xEnd, yEnd){\n    this.xPos = xPos;\n    this.yPos= yPos;\n    this.xEnd = xEnd;\n    this.yEnd = yEnd;\n    this.angle = Math.atan2(yEnd - yPos, xEnd - xPos)\n    this.angle = this.angle + ((180 * Math.PI) / 180)\n    this.speed = 3;\n    this.radius = 3;\n    this.vx = Math.cos(this.angle) * this.speed;\n    this.vy = Math.sin(this.angle) * this.speed;\n    this.draw = this.draw.bind(this);\n    this.changePosition = this.changePosition.bind(this);\n    this.move = this.move.bind(this);\n    this.ctx = ctx;\n    this.collided = false;\n    this.exploded = false;\n    this.timedOut = false;\n    this.markedForClear = false;\n    this.image = new Image();\n    this.image.src = 'assets/images/bullet_sprite.png'\n    this.count = 0;\n    this.internalCLick = 0;\n    this.x = this.xPos - 5;\n    this.y = this.yPos - 3;\n    this.height = 10;\n    this.width = 10;\n  }\n\n  hasCollided() {\n    this.collided = true;\n  }\n\n  explode() {\n    this.exploded = true;\n    if (!this.markedForClear){\n      this.markedForClear = true;\n      setTimeout(() => {\n        this.timedOut = true\n        this.radius = 0;}, 2000)\n    }\n  }\n\n  draw() {\n    this.internalCLick += 2;\n\n    if (!this.collided && !this.exploded){\n      // this.ctx.beginPath();\n      // this.ctx.fillStyle = 'yellow';\n      // this.ctx.arc(this.xPos,this.yPos, this.radius, 0, 2 * Math.PI)\n      // this.ctx.fill();\n      // this.ctx.stroke();\n      // this.ctx.closePath();\n      this.ctx.beginPath();\n      this.ctx.fillStyle = this.color\n      this.ctx.fillRect(this.xPos-5,this.yPos-3, 10, 10)\n      this.ctx.closePath();\n      // if (this.internalClick % 20 === 0) {\n      // if (this.count === 96) {\n      //   this.count = 0;\n      // } else {\n      //   this.count += 32;\n      //   }\n      // }\n      this.ctx.drawImage(this.image, 170, 47, 50, 49, this.xPos-5, this.yPos-6, 20, 20);\n\n    } else if (this.exploded) {\n      // why is the rectangle collision not working????\n      this.radius = 20;\n      this.x = this.xPos + 40;\n      this.y = this.yPos + 40;\n      this.ctx.beginPath();\n      this.ctx.fillStyle = this.color\n      this.ctx.fillRect(this.xPos-5,this.yPos-3, 40, 40)\n      this.ctx.closePath();\n      this.image = new Image();\n      this.image.src = './assets/images/shell_explosion_sprite.png'\n      this.ctx.drawImage(this.image, this.xPos-20, this.yPos-20, 40, 40)\n    }\n  }\n\n  exploded(){\n    this.exploded = true;\n  }\n\n  changePosition() {\n    this.yPos -= this.vy;\n    this.xPos -= this.vx;\n    this.x -= this.vx;\n    this.y -= this.vy;\n  }\n\n\n  hasCollidedWith(otherObject){\n      let dx = this.xPos - otherObject.xPos;\n      let dy = this.yPos - otherObject.yPos;\n      let distance = Math.sqrt(dx * dx + dy * dy)\n\n      if (distance < this.radius + otherObject.radius){\n        return true\n      } else {\n        return false\n      }\n  }\n\n  move() {\n    if (!this.exploded) {\n      this.draw();\n      this.changePosition();\n    } else {\n      this.draw();\n    }\n  }\n}\n\nexport default Bullet;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/bullet.js\n// module id = 0\n// module chunks = 0","import Game from './game';\n\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  $('.end-screen').hide()\n  const canvas = document.querySelector('canvas');\n  const ctx = canvas.getContext('2d');\n  const game = new Game(ctx, canvas);\n    document.addEventListener('keypress', (e) => {\n      $('.start-screen').hide();\n        game.play(ctx, canvas);\n    })\n})\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/missile_defense.js\n// module id = 1\n// module chunks = 0","import Bullet from './bullet'\nimport Missile from './missile';\nimport Gunner from './gunner';\nimport City from './city';\n\n\nclass Game {\n  constructor(ctx, canvas){\n    this.ctx = ctx;\n    this.canvas = canvas;\n    this.renderFrame = this.renderFrame.bind(this)\n    this.createMissiles = this.createMissiles.bind(this)\n    this.createCities = this.createCities.bind(this)\n    this.gameOver.bind(this);\n    this.updateStats.bind(this);\n    this.checkCanvas = this.checkCanvas.bind(this)\n    this.missiles = this.createMissiles(5);\n    this.createMissiles(5)\n    this.createCities();\n    this.gunner1 = new Gunner(300, 447, 20, this.ctx)\n    this.bullets = [];\n    this.checkCollision = this.checkCollision.bind(this)\n    this.explodedObjects = [];\n    this.click = this.click.bind(this);\n    this.triggerGun = this.triggerGun.bind(this);\n    this.click();\n    this.destroyedCityCount = [];\n    this.gunnerLives = 3\n    this.missileCount = this.missiles.length\n    this.requestId;\n    this.gameFinished = false;\n    this.points = 0;\n  }\n\n  updateStats(){\n    document.getElementById('gunner-lives').innerHTML = `Gunner Lives Remaining: ${this.gunnerLives}`\n    document.getElementById('points').innerHTML = `Points:${this.points}`\n    document.getElementById('cities').innerHTML = `Cities Remaining: ${6 - this.destroyedCityCount.length}`\n  }\n\n\n  click(){\n    let that = this\n    var pos = [];\n    that.canvas.onclick = function(e) {\n      let yEnd = e.offsetY\n      let xEnd = e.offsetX\n      that.triggerGun(xEnd, yEnd)\n    }\n  }\n\n  triggerGun(xEnd, yEnd){\n    let bullet = this.gunner1.shoot(xEnd, yEnd)\n    this.bullets.push(bullet);\n  }\n\n  createMissiles(num){\n    // this.missiles = [];\n    // let speeds = [3]//[.5, .7, 1, 1.2, 1.5, 2]\n    // let angles = [ 65, 70, 80, 75, 73, 68, 85, 88, 90]\n    // let xPositions = [100, 150, 200, 210, 250, 300, 400, 300, 300 ]\n    // for (let i = 0; i < num; i++){\n    //   let angle = angles[Math.floor(Math.random() * angles.length)];\n    //   let xPos = xPositions[Math.floor(Math.random() * xPositions.length)];\n    //   let speed = speeds[Math.floor(Math.random() * speeds.length)];\n    //   let missile = new Missile(this.ctx, xPos, angle, speed);\n    //   this.missiles.push(missile)\n    // }\n    return this.missiles = [new Missile(this.ctx, 100, 90, 1 )]\n  }\n\n  createCities(){\n    let city1 = new City(0,450,100,50,'yellow',this.ctx)\n    let city2 = new City(100,450,100,50,'blue',this.ctx)\n    let city3 = new City(200,450,100,50,'yellow',this.ctx)\n    let city4 = new City(300,450,100,50,'blue',this.ctx)\n    let city5 = new City(400,450,100,50,'yellow',this.ctx)\n    let city6 = new City(500,450,100,50,'blue',this.ctx)\n    return this.cities = [city1,city2, city3, city4, city5, city6]\n  }\n\n  checkCollision(){\n    let missiles = this.missiles\n    let explodedBullets = this.explodedObjects.filter((object) => object.constructor.name === 'Bullet')\n    let bullets = this.bullets.concat(explodedBullets)\n    for (let i = 0; i < missiles.length; i++) {\n      for (let j = 0; j < bullets.length; j++) {\n        debugger\n        const missile = missiles[i];\n        const bullet = bullets[j];\n        if (missile.hasCollidedWith(bullet)){\n          missile.explode();\n          missile.generalHit = true;\n          bullet.explode();\n          this.explodedObjects.push(missile)\n          this.explodedObjects.push(bullet)\n          this.missileCount--;\n          this.points = this.points + 10\n          missiles.splice(missiles.indexOf(missile),1)\n          bullets.splice(bullets.indexOf(bullet),1)\n          return\n        }\n      }\n    }\n    if (this.missiles.length === 0) return;\n    let missiles2 = this.missiles\n    let gunners = [this.gunner1]\n    for (let i = 0; i < missiles.length; i++) {\n      for (let j = 0; j < gunners.length; j++) {\n        const missile = missiles2[i];\n        const gunner = gunners[j];\n        if (missile.hasCollidedWith(gunner)){\n          missile.explode();\n          missile.generalHit = true;\n          this.gunnerLives--;\n          this.missileCount--;\n          this.explodedObjects.push(missile)\n          this.explodedObjects.push(gunner)\n          missiles.splice(missiles2.indexOf(missile),1)\n        }\n      }\n    }\n    if (this.missiles.length === 0) return;\n    let missiles3 = this.missiles\n    let cities = this.cities\n    for (let i = 0; i < missiles3.length; i++) {\n      for (let j = 0; j < cities.length; j++) {\n        const missile = missiles3[i];\n        const city = cities[j];\n        if ( (missile.yPos > 450) && ( (missile.xPos >= city.xStart) &&\n           (missile.xPos <= city.xStart + 100) ) ){\n          // missile.explode();\n          missile.cityHit = true;\n          city.exploded = true;\n          this.missileCount--;\n          if (!this.destroyedCityCount.includes(city)) this.destroyedCityCount.push(city);\n          this.explodedObjects.push(missile);\n          this.missiles.splice(this.missiles.indexOf(missile),1)\n          return\n        }\n      }\n     }\n    }\n\n  checkCanvas(){\n    this.missiles.forEach( obj => {\n      if (obj.xPos < 0 || obj.xPos > 600 || obj.yPos > 500 || obj.yPos < 0  ){\n        this.missileCount --;\n        this.missiles.splice(this.missiles.indexOf(obj),1)\n      }\n    })\n  }\n\n  renderFrame() {\n    this.updateStats()\n    if(this.gameFinished) return window.cancelAnimationFrame(this.requestId);\n    this.ctx.clearRect(0,0, 600, 500)\n    this.gunner1.draw()\n    this.checkCanvas();\n    this.bullets.forEach(bullet => {\n      if (bullet.yPos <= bullet.yEnd || bullet.exploded){\n        bullet.explode();\n        if (!this.explodedObjects.includes(bullet)) {\n          this.explodedObjects.push(bullet);\n          this.bullets.splice(this.bullets.indexOf(bullet),1)\n        }\n      }\n    })\n    this.cities.forEach(city => {\n      city.draw();\n    })\n\n    let allObjects = this.bullets.concat(this.missiles)\n    allObjects.forEach((object) => {\n            object.move();\n        });\n    if (this.explodedObjects.length !== 0){\n      for (let i=0; i < this.explodedObjects.length; i++){\n        if (this.explodedObjects[i].timedOut){\n          this.explodedObjects.splice(i,1)\n          continue;\n        }\n        this.explodedObjects[i].draw();\n      }\n    }\n    this.checkCollision();\n    this.gameOver();\n    // this.newLevel();\n    this.requestId = requestAnimationFrame(this.renderFrame);\n  }\n\n  gameOver(){\n    if (this.gunnerLives === 0 || this.destroyedCityCount.length === 6){\n      $('.end-screen').show()\n      this.gameFinished = true\n      var that = this\n      key('space', () => {\n        document.location.reload()\n      })\n    }\n  }\n\n  newLevel(){\n    if (this.missileCount === 0 && !this.gameFinished ){\n      this.missileCount = 5\n      return this.createMissiles(5)\n    }\n  }\n\n  play(){\n    this.renderFrame();\n  }\n}\n\nexport default Game;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/game.js\n// module id = 2\n// module chunks = 0"," // const MovingObject = require('./moving_object')\n\n class Missile {\n  constructor(ctx, xPos, angle, speed) {\n  this.color = 'green';\n  this.xPos = xPos\n  this.originalAngle = angle;\n  this.yPos = 0\n  this.angle = this.originalAngle * Math.PI / 180\n  this.speed = speed;\n  this.radius = 4;\n  this.vx = Math.cos(this.angle) * this.speed;\n  this.vy = Math.sin(this.angle) * this.speed;\n  this.draw = this.draw.bind(this);\n  this.changePosition = this.changePosition.bind(this);\n  this.move = this.move.bind(this);\n  this.ctx = ctx;\n  this.collided = false;\n  this.exploded = false;\n  this.timedOut = false;\n  this.markedForClear = false;\n  this.regularMissile = new Image();\n  this.regularMissile.src = 'assets/images/missile_sprite.png'\n  this.cityHit = false;\n  this.cityExplosion = new Image()\n  this.cityExplosion.src = 'assets/images/explosion-sprite.png'\n  this.cityExplosionCount = 0;\n  this.cityExplosionClick = 0;\n  this.generalHit = 0;\n  this.generalExplosion = new Image()\n  this.generalExplosion.src = 'assets/images/general_explosion_sprite.png'\n  this.generalExplosionCountHoz = 0;\n  this.generalExplosionCountVert = 0;\n  this.generalExplosionClick = 0;\n  this.x = this.xPos - 8;\n  this.y = this.yPos - 50;\n  this.width = 15;\n  this.height = 50;\n  }\n\n  hasCollided() {\n    this.collided = true;\n  }\n\n  explode() {\n    this.exploded = true;\n    if (!this.markedForClear){\n      this.markedForClear = true;\n      setTimeout(() => this.timedOut = true, 500)\n    }\n  }\n\n  draw() {\n    if (this.cityHit){\n      this.cityExplosionClick += 2\n      if (this.cityExplosionClick % 20 === 0) {\n          this.cityExplosionCount += 95;\n      }\n      this.ctx.drawImage(this.cityExplosion, this.cityExplosionCount, 100, 90, 100, this.xPos-30, this.yPos-40, 60, 50);\n    } else if (this.generalHit) { // (!this.collided && !this.exploded){\n      this.generalExplosionClick += 5\n      if (this.generalExplosionClick % 10 === 0){\n        if (this.generalExplosionCountHoz === 390){ // this is the max width of sprite sheet\n          this.generalExplosionCountHoz = 0;\n          this.generalExplosionCountVert += 130; // sprite sheet is in sqs of 130 by 130\n        } else if (this.generalExplosionCountHoz === 130 && this.gunnerExplosionCountVert === 390){ // for when we reach the end of the sprite sheet\n          this.generalExplosionCountHoz = 0;\n          this.generalExplosionCountVert = 0;\n          this.generalHit = false;\n        } else {\n          this.generalExplosionCountHoz += 130;\n        }\n      }\n      this.ctx.drawImage(this.generalExplosion, this.generalExplosionCountHoz, this.generalExplosionCountVert, 100, 100, this.xPos-30, this.yPos-35, 50, 50)\n\n    } else if (!this.collided && !this.exploded){        // this.ctx.beginPath();\n        // this.ctx.fillStyle = this.color;\n        // this.ctx.arc(this.xPos,this.yPos,4, 0, 2 * Math.PI)\n        // this.ctx.fill();\n        // this.ctx.stroke();\n        // this.ctx.closePath();\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.color\n        this.ctx.fillRect(this.xPos-8,this.yPos-50, 15, 50)\n        this.ctx.closePath();\n        this.ctx.drawImage(this.regularMissile, 0, 0, 90, 120, this.xPos-50, this.yPos-50, 60, 50 )\n    }\n    else if (this.exploded && !this.timedOut) {\n      this.ctx.beginPath();\n      this.ctx.fillStyle = this.color\n      this.ctx.fillRect(this.xPos,this.yPos, 4, 10)\n      this.ctx.closePath();\n    }\n  }\n\n  exploded(){\n    this.exploded = true;\n  }\n\n  changePosition() {\n    this.yPos += this.vy;\n    this.xPos += this.vx;\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n\n  hasCollidedWith(otherObject){\n    if (this.x < otherObject.x + otherObject.width &&\n         this.x + this.width > otherObject.x &&\n         this.y < otherObject.y + otherObject.height &&\n         this.height + this.y > otherObject.y) {\n           debugger\n      return true\n    } else {\n      return false\n    }\n\n      // let dx = this.xPos - otherObject.xPos;\n      // let dy = this.yPos - otherObject.yPos;\n      // let distance = Math.sqrt(dx * dx + dy * dy)\n      //\n      // if (distance < this.radius + otherObject.radius){\n      //   return true\n      // } else {\n      //   return false\n      // }\n\n  }\n\n  move() {\n    if (!this.exploded) {\n      this.draw();\n      this.changePosition();\n    } else {\n      this.draw();\n    }\n  }\n\n}\n\nexport default Missile;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/missile.js\n// module id = 3\n// module chunks = 0","// import Bullet from './gunner'\nimport Bullet from './bullet';\nclass Gunner {\n  constructor(xPos, yPos, radius, ctx){\n    this.xPos = xPos;\n    this.yPos = yPos;\n    this.radius = radius;\n    this.ctx = ctx;\n    this.max = 20;\n    this.shoot = this.shoot.bind(this)\n  }\n\n  shoot(endPosX, endPosY ){\n      let bullet = new Bullet (this.ctx, this.xPos, this.yPos, endPosX, endPosY)\n      return bullet\n  }\n\n  draw(){\n    this.ctx.beginPath();\n    this.ctx.fillStyle = 'blue';\n    this.ctx.arc(this.xPos,this.yPos,this.radius, 0, 2 * Math.PI)\n    this.ctx.fill();\n    this.ctx.stroke();\n    this.ctx.closePath();\n  }\n\n  hasCollidedWith(otherObject){\n      let dx = this.xPos - otherObject.xPos;\n      let dy = this.yPos - otherObject.yPos;\n      let distance = Math.sqrt(dx * dx + dy * dy)\n\n      if (distance < this.radius + otherObject.radius){\n        return true\n      } else {\n        return false\n      }\n  }\n}\n\nexport default Gunner;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/gunner.js\n// module id = 4\n// module chunks = 0","\nclass City {\n  constructor(xStart, yStart, width, height, color, ctx){\n    this.xStart = xStart;\n    this.yStart = yStart;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n    this.ctx = ctx;\n    this.exploded = false;\n    // this.image = new Image()\n    // this.image.src = './assets/images/city_sprite_sheet.png'\n    this.image = new Image()\n    // debugger\n    this.image.src = './assets/images/city_pic.jpg'\n  }\n\n\n  draw(){\n    // if (!this.exploded){\n    //   this.ctx.drawImage(this.image, this.xStart, this.yStart, this.width, this.height)\n    // } else {\n    //   this.image.src = './assets/images/burning_city.jpg'\n    //   this.ctx.drawImage(this.image, this.xStart, this.yStart, this.width, this.height)\n    //   // this.ctx.beginPath()\n    //   // this.ctx.fillStyle = 'red';\n    //   // this.ctx.fillRect(this.xStart, this.yStart, this.width, this.height)\n    //   // this.ctx.closePath();\n    // }\n  }\n\n}\n\nexport default City;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/city.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}